{"version":3,"sources":["../../../projects/ix-libs/src/lib/ix-icons/ix-icons.module.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.service.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.component.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.component.html","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.module.ts","../../../projects/ix-libs/src/lib/ix-media/ix-media.service.ts","../../../projects/ix-libs/src/lib/shared/local-storage.service.ts","../../../projects/ix-libs/src/lib/ix-dark/ix-dark.service.ts","../../../projects/ix-libs/src/lib/shared/session-storage.service.ts","../../../projects/ix-libs/src/lib/ix-theme-button/ix-theme-button.component.ts","../../../projects/ix-libs/src/lib/ix-theme-button/ix-theme-button.component.html","../../../projects/ix-libs/src/lib/ix-theme-button/ix-theme-button.module.ts"],"names":["iconRegistry","sanitizer","addSvgIcon","bypassSecurityTrustResourceUrl","IxIconsModule","i0","ɵɵinject","i1","MatIconRegistry","i2","DomSanitizer","ScrollButtonService","prototype","setContainerId","id","document","getElementById","setAttribute","getElementsByTagName","checkScroll","container","of","scrollHeight","clientHeight","scrollToTop","scroll","top","behavior","factory","ɵfac","providedIn","ScrollTopButtonComponent","ngZone","scrollButtonService","_this","this","isScrollable","window","onresize","e","run","localCheckScroll","scrollableElementId","subscribe","res","ngOnInit","setTimeout","ɵɵdirectiveInject","NgZone","selectors","inputs","color","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","IxScrollModule","imports","MatButtonModule","MatIconModule","CommonModule","declarations","exports","IxMediaQueryService","media","asObservable","pipe","filter","changes","length","map","medias","change","mq","mqAlias","mediaQuery","suffix","_mediaChecker","mediaArray","mqString","exists","forEach","med","has","i1$1","MediaObserver","IxLocalStorageService","localStorageFeatureAvailable","storageAvailable","console","warn","setItem","key","value","localStorage","getItem","removeItem","clear","iCanUseLocalStorageApi","type","storage","x","IxDarkService","sorageService","themeStream","ReplaySubject","prefersDark","matchMedia","matches","localStorageLightDark","setDarkModePreference","body","classList","add","_toggleBodyClasses","next","toggleDarkLightMode","colorToSet","toLowerCase","remove","DOCUMENT","IxSessionStorageService","sessionStorageFeatureAvailable","sessionStorage","iCanUseSessionStorageApi","ThemeButtonComponent","darkService","toggleDarkMode","_subToTheme","ev","theme","i0.ɵɵadvance","IxThemeButtonModule"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [],\n  exports: [],\n})\nexport class IxIconsModule {\n  // To use: <mat-icon svgIcon=\"ix-file-pdf\"></mat-icon>\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n      'ix-file-pdf',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_pdf.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-doc',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_doc.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-excel',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_excel.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-html',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_html.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-export',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/export.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-dialog',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/dialog.svg')\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScrollButtonService {\n  constructor() {}\n\n  setContainerId(id?): void {\n    if (id) {\n      const bodyEl = document.getElementById(id);\n      bodyEl.setAttribute('id', id);\n    } else {\n      const bodyEl = document.getElementsByTagName('BODY')[0];\n      bodyEl.setAttribute('id', 'ix-scroll-container');\n    }\n  }\n\n  checkScroll(id?): Observable<boolean> {\n    if (id) {\n      const container = document.getElementById(id);\n      return of(container.scrollHeight > container.clientHeight);\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      return of(container.scrollHeight > container.clientHeight);\n    }\n  }\n\n  scrollToTop(id?): void {\n    if (id) {\n      const container = document.getElementById(id);\n      container.scroll({ top: 0, behavior: 'smooth' });\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      container.scroll({ top: 0, behavior: 'smooth' });\n    }\n  }\n}\n","import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  Input,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport { ScrollButtonService } from './ix-scroll.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ix-scroll-button',\n  templateUrl: './ix-scroll.component.html',\n  styleUrls: ['./ix-scroll.component.scss'],\n})\nexport class ScrollTopButtonComponent implements OnInit {\n  @Input() color: 'primary' | 'accent';\n  @Input() scrollableElementId: string;\n  @Input() isScrollable = false;\n  constructor(\n    private ngZone: NgZone,\n    public scrollButtonService: ScrollButtonService\n  ) {\n    window.onresize = (e) => {\n      this.ngZone.run(() => {\n        this.localCheckScroll();\n      });\n    };\n  }\n\n  localCheckScroll(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService\n        .checkScroll(this.scrollableElementId)\n        .subscribe((res) => {\n          this.isScrollable = res;\n        });\n    } else {\n      this.scrollButtonService.checkScroll().subscribe((res) => {\n        this.isScrollable = res;\n      });\n    }\n  }\n  scrollToTop(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService.scrollToTop(this.scrollableElementId);\n    } else {\n      this.scrollButtonService.scrollToTop();\n    }\n  }\n\n  ngOnInit(): void {\n    this.scrollButtonService.setContainerId(this.scrollableElementId);\n    setTimeout(() => {\n      this.localCheckScroll();\n    }, 500);\n  }\n}\n","<button mat-mini-fab class=\"scroll-top\" (click)=\"scrollToTop()\"\n  [ngClass]=\"{'hidden': !isScrollable, 'mat-primary': color === 'primary', 'mat-accent': color === 'accent'}\">\n  <mat-icon>arrow_upward</mat-icon>\n</button>\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { ScrollTopButtonComponent } from './ix-scroll.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ScrollTopButtonComponent],\n  imports: [MatButtonModule, MatIconModule, CommonModule],\n  exports: [ScrollTopButtonComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxScrollModule {}\n","import { Injectable } from '@angular/core';\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxMediaQueryService {\n  public mq: string;\n  public mediaQuery: string;\n  public suffix: string;\n  private medias: MediaChange[];\n\n  constructor(public media: MediaObserver) {\n    this.media\n      .asObservable()\n      .pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this.medias = changes;\n          return changes[0];\n        })\n      )\n      .subscribe((change: MediaChange) => {\n        this.mq = change.mqAlias;\n        this.mediaQuery = change.mediaQuery;\n        this.suffix = change.suffix;\n      });\n  }\n\n  private _mediaChecker(mediaArray: MediaChange[], mqString: string): boolean {\n    let exists;\n    mediaArray.forEach((med) => {\n      if (med.mqAlias === mqString) {\n        exists = true;\n      }\n    });\n    return exists;\n  }\n\n  // used to check if viewport has a media query size\n  public has(mqString): boolean {\n    if (this.medias) {\n      return this._mediaChecker(this.medias, mqString);\n    } else {\n      this.media.asObservable().pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this._mediaChecker(changes, mqString);\n        })\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * This is a shim for the Window.localStorage api.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n *\n * This service performs feature detection of Window.localStorage. If\n * Window.localStorage is available then the functions are passed through.\n * If Window.localStorage is not available then items are stored on\n * an object on Window named Window.{storageKey}. And all methods act on that\n * object. The {storageKey} variable is stored in environments.storageKey.\n *\n * This service only supports Window.localStorage as Window.localStorage\n * is controlled by the browser and cannot be truely shimed beyond the sesssion.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxLocalStorageService {\n  public readonly localStorageFeatureAvailable: boolean;\n\n  constructor() {\n    this.localStorageFeatureAvailable = this.storageAvailable('localStorage');\n    if (!this.localStorageFeatureAvailable) {\n      console.warn(\n        'Window.localStorage is NOT available. Falling back to object storage.'\n      );\n      window[`ix`] = {};\n    }\n  }\n\n  /**\n   * Save data to localStorage\n   * @param key the key of the stored item\n   * @param value the value being stored\n   */\n  public setItem(key: string, value: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.setItem(key, value);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = value;\n    }\n  }\n\n  /**\n   * Get saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public getItem(key: string): string {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      return window.localStorage.getItem(key);\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      return window[`ix`][key];\n    }\n  }\n\n  /**\n   * Remove saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public removeItem(key: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.removeItem(key);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = null;\n    }\n  }\n\n  /**\n   * Remove all saved data from localStorage\n   */\n  public clear(): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.clear();\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`] = {};\n    }\n  }\n\n  protected iCanUseLocalStorageApi(): boolean {\n    return this.storageAvailable('localStorage');\n  }\n\n  protected storageAvailable(type: string): boolean {\n    var storage;\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import { Injectable, Inject, OnInit } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\n\nimport { IxLocalStorageService } from '../shared/local-storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxDarkService {\n  prefersDark: boolean;\n  localStorageLightDark: string;\n  currentMode: string;\n  themeStream = new ReplaySubject<string>();\n  sorageService: IxLocalStorageService;\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    sorageService: IxLocalStorageService\n  ) {\n    this.prefersDark =\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.sorageService = sorageService;\n    this.localStorageLightDark = sorageService.getItem('DarkModePref');\n  }\n  // ******************************************************************************\n  // This service requires Angular Material's theming to have two themes\n  // with .light and .dark wrapping classes.\n  // It is possible to use this service outside of Angular Material, but\n  // native framework element coloring will not be affected without\n  // custom css overwrites.\n  // ******************************************************************************\n\n  // used onInit() to evaluate users system preferences\n  // if they have a preset preferences in localstorage or window.storage\n  // it will apply that theme, if not it will check system settings\n  // if they have dark mode enabled, it will apply the dark mode to the app\n  public setDarkModePreference(): void {\n    if (this.localStorageLightDark) {\n      this.document.body.classList.add(this.localStorageLightDark);\n      this._toggleBodyClasses(this.localStorageLightDark);\n      if (this.localStorageLightDark === 'dark') {\n        this._toggleBodyClasses('dark');\n        this.themeStream.next('dark');\n      } else {\n        this._toggleBodyClasses('light');\n        this.themeStream.next('light');\n      }\n    } else if (this.prefersDark) {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  // used to toggle light/dark themes\n  public toggleDarkLightMode(): void {\n    if (this.localStorageLightDark === 'light') {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  private _toggleBodyClasses(colorToSet): void {\n    this.sorageService.setItem('DarkModePref', colorToSet);\n    this.localStorageLightDark = this.sorageService.getItem('DarkModePref');\n    if (colorToSet.toLowerCase() === 'dark') {\n      this.document.body.classList.remove('light');\n      this.document.body.classList.add(colorToSet);\n    } else if (colorToSet.toLowerCase() === 'light') {\n      this.document.body.classList.remove('dark');\n      this.document.body.classList.add(colorToSet);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * This is a shim for the Window.sessionStorage api.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n *\n * This service performs feature detection of Window.sessionStorage. If\n * Window.sessionStorage is available then the functions are passed through.\n * If Window.sessionStorage is not available then items are stored on\n * an object on Window named Window.{storageKey}. And all methods act on that\n * object. The {storageKey} variable is stored in environments.storageKey.\n *\n * This service only supports Window.sessionStorage as Window.sessionStorage\n * is controlled by the browser and cannot be truely shimed beyond the sesssion.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxSessionStorageService {\n  public readonly sessionStorageFeatureAvailable: boolean;\n\n  constructor() {\n    this.sessionStorageFeatureAvailable = this.storageAvailable(\n      'sessionStorage'\n    );\n    if (!this.sessionStorageFeatureAvailable) {\n      console.warn(\n        'Window.sessionStorage is NOT available. Falling back to object storage.'\n      );\n      window[`ix`] = {};\n    }\n  }\n\n  /**\n   * Save data to sessionStorage\n   * @param key the key of the stored item\n   * @param value the value being stored\n   */\n  public setItem(key: string, value: string): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.setItem(key, value);\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`][key] = value;\n    }\n  }\n\n  /**\n   * Get saved data from sessionStorage\n   * @param key the key of the stored item\n   */\n  public getItem(key: string): string {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      return window.sessionStorage.getItem(key);\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      return window[`ix`][key];\n    }\n  }\n\n  /**\n   * Remove saved data from sessionStorage\n   * @param key the key of the stored item\n   */\n  public removeItem(key: string): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.removeItem(key);\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`][key] = null;\n    }\n  }\n\n  /**\n   * Remove all saved data from sessionStorage\n   */\n  public clear(): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.clear();\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`] = {};\n    }\n  }\n\n  protected iCanUseSessionStorageApi(): boolean {\n    return this.storageAvailable('sessionStorage');\n  }\n\n  protected storageAvailable(type: string): boolean {\n    var storage;\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  Input,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport { IxDarkService } from '../ix-dark/ix-dark.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ix-theme-button',\n  templateUrl: './ix-theme-button.component.html',\n  styleUrls: ['./ix-theme-button.component.scss'],\n})\nexport class ThemeButtonComponent implements OnInit {\n  theme: string;\n  constructor(private ngZone: NgZone, private darkService: IxDarkService) {}\n\n  // will switch themes using the IxDark service\n  public toggleDarkMode(): void {\n    this.darkService.toggleDarkLightMode();\n  }\n\n  // will subscribe to themes to animate icon\n  private _subToTheme(): void {\n    this.darkService.themeStream.subscribe((ev) => {\n      this.theme = ev;\n    });\n  }\n\n  // will setup themes with IxDark service\n  ngOnInit(): void {\n    this._subToTheme();\n    this.darkService.setDarkModePreference();\n  }\n}\n","<button mat-icon-button id=\"dark-mode-button\" (click)=\"toggleDarkMode()\">\n  <mat-icon [ngClass]=\"{'dark-button': theme === 'dark', 'light-button': theme === 'light'}\">\n    brightness_6\n  </mat-icon>\n</button>\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { ThemeButtonComponent } from './ix-theme-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ThemeButtonComponent],\n  imports: [MatButtonModule, MatIconModule, CommonModule],\n  exports: [ThemeButtonComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxThemeButtonModule {}\n"]}