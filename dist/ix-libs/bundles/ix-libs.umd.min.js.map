{"version":3,"sources":["../../../projects/ix-libs/src/lib/ix-icons/ix-icons.module.ts","../../../projects/ix-libs/src/lib/ix-pipes/ampm.pipe.ts","../../../projects/ix-libs/src/lib/ix-pipes/camel-to-title.pipe.ts","../../../projects/ix-libs/src/lib/ix-pipes/file-size.pipe.ts","../../../projects/ix-libs/src/lib/ix-pipes/phone.pipe.ts","../../../projects/ix-libs/src/lib/ix-pipes/safe.pipe.ts","../../../projects/ix-libs/src/lib/ix-pipes/ix-pipes.module.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.service.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.component.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.module.ts","../../../projects/ix-libs/src/lib/ix-media/ix-media.service.ts","../../../projects/ix-libs/src/lib/shared/local-storage.service.ts","../../../projects/ix-libs/src/lib/ix-dark/ix-dark.service.ts","../../../projects/ix-libs/src/lib/shared/session-storage.service.ts","../../../projects/ix-libs/src/lib/ix-theme-button/ix-theme-button.component.ts","../../../projects/ix-libs/src/lib/ix-theme-button/ix-theme-button.module.ts"],"names":["iconRegistry","sanitizer","addSvgIcon","bypassSecurityTrustResourceUrl","NgModule","args","declarations","exports","MatIconRegistry","DomSanitizer","AmPmPipe","prototype","transform","value","_i","arguments","length","hour","minutes","seconds","amPm","timeArray","split","rawHour","parseInt","displayString","Pipe","name","CamelToTitlePipe","result","replace","finalResult","charAt","toUpperCase","slice","FileSizePipe","transformOne","options","filesize_","Array","isArray","map","val","PhonePipe","areaCode","substring","prefix","suffix","ext","SafePipe","this","type","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","Error","pipes","imports","CommonModule","schemas","CUSTOM_ELEMENTS_SCHEMA","ScrollButtonService","source","interval","setContainerId","id","document","getElementById","setAttribute","getElementsByTagName","checkScroll","container","of","scrollHeight","clientHeight","scrollToTop","scroll","top","behavior","scrollElementIntoView","location","scrollIntoView","block","inline","startScrollMarking","_this","subscription","subscribe","_markScrollables","stopScrollMarking","unsubscribe","call","querySelectorAll","filter","e","scrollWidth","offsetWidth","offsetHeight","style","window","getComputedStyle","overflow","overflowX","overflowY","some","forEach","color","Math","floor","random","toString","backgroundColor","_throttle","addEventListener","event","console","log","target","obj","running","requestAnimationFrame","dispatchEvent","CustomEvent","Injectable","providedIn","ScrollTopButtonComponent","ngZone","scrollButtonService","isScrollable","onresize","run","localCheckScroll","scrollableElementId","res","ngOnInit","setTimeout","Component","selector","template","NgZone","Input","MatButtonModule","MatIconModule","IxMediaQueryService","media","asObservable","pipe","changes","medias","change","mq","mqAlias","mediaQuery","_mediaChecker","mediaArray","mqString","exists","med","has","MediaObserver","IxLocalStorageService","localStorageFeatureAvailable","storageAvailable","warn","setItem","key","localStorage","getItem","removeItem","clear","iCanUseLocalStorageApi","storage","x","IxDarkService","sorageService","themeStream","ReplaySubject","prefersDark","matchMedia","matches","localStorageLightDark","setDarkModePreference","body","classList","add","_toggleBodyClasses","next","toggleDarkLightMode","colorToSet","toLowerCase","remove","Inject","DOCUMENT","IxSessionStorageService","sessionStorageFeatureAvailable","sessionStorage","iCanUseSessionStorageApi","ThemeButtonComponent","darkService","toggleDarkMode","_subToTheme","ev","theme"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [],\n  exports: [],\n})\nexport class IxIconsModule {\n  // To use: <mat-icon svgIcon=\"ix-file-pdf\"></mat-icon>\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n      'ix-file-pdf',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_pdf.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-doc',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_doc.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-excel',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_excel.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-html',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_html.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-export',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/export.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-dialog',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/dialog.svg')\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'ampm'\n})\nexport class AmPmPipe implements PipeTransform {\n  transform(value: string, ...args: unknown[]): unknown {\n    const timeArray = value.split(':');\n    const rawHour = parseInt(timeArray[0], 10);\n    let hour: number;\n    let minutes: string;\n    let seconds: string;\n    let amPm: string;\n    if (rawHour > 12) {\n      hour = rawHour - 12;\n      amPm = ' PM';\n    } else {\n      if (rawHour === 0) {\n        hour = 12;\n      } else {\n        hour = rawHour;\n      }\n      amPm = ' AM';\n    }\n    if (timeArray[1]) {\n      minutes = `${timeArray[1]}`;\n    }\n    if (timeArray[2]) {\n      seconds = `${timeArray[2]}`;\n    } else {\n      minutes = '00';\n    }\n\n    const displayString = seconds ? `${hour}:${minutes}:${seconds} ${amPm}` : `${hour}:${minutes} ${amPm}`;\n    return displayString;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'c2t'\n})\nexport class CamelToTitlePipe implements PipeTransform {\n  transform(value: string, ...args: unknown[]): unknown {\n    const result = value.replace(/([A-Z])/g, ' $1');\n    const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n    return finalResult;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as filesize_ from 'filesize';\n\n@Pipe({\n  name: 'filesize',\n})\nexport class FileSizePipe implements PipeTransform {\n  private static transformOne(value: number, options?: any): string {\n    const filesize = filesize_;\n    return filesize(value, options);\n  }\n\n  transform(value: number | number[], options?: any) {\n    if (Array.isArray(value)) {\n      return value.map((val) => FileSizePipe.transformOne(val, options));\n    }\n\n    return FileSizePipe.transformOne(value, options);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n  transform(val: string) {\n    const areaCode = val.substring(0, 3);\n    const prefix = val.substring(3, 6);\n    const suffix = val.substring(6, 10);\n    const ext = `ext: ${val.substring(10, 20)}`;\n    if (val.substring(11, 16)) {\n      return `(${areaCode}) ${prefix}-${suffix} ${ext}`;\n    } else {\n      return `(${areaCode}) ${prefix}-${suffix}`;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n  DomSanitizer,\r\n  SafeHtml,\r\n  SafeStyle,\r\n  SafeScript,\r\n  SafeUrl,\r\n  SafeResourceUrl,\r\n} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: `safe`,\r\n})\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(protected sanitizer: DomSanitizer) {}\r\n\r\n  public transform(\r\n    value: any,\r\n    type: string\r\n  ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n    switch (type) {\r\n      case `html`:\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n      case `style`:\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n      case `script`:\r\n        return this.sanitizer.bypassSecurityTrustScript(value);\r\n      case `url`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n      case `sms`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(`sms:${value}`);\r\n      case `text`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(`sms:${value}`);\r\n      case `mailto`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(`mailto:${value}`);\r\n      case `email`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(`mailto:${value}`);\r\n      case `tel`:\r\n        return this.sanitizer.bypassSecurityTrustUrl(`tel:${value}`);\r\n      case `resourceUrl`:\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n      default:\r\n        throw new Error(`Invalid safe type specified: ${type}`);\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { AmPmPipe } from './ampm.pipe';\nimport { CamelToTitlePipe } from './camel-to-title.pipe';\nimport { FileSizePipe } from './file-size.pipe';\nimport { PhonePipe } from './phone.pipe';\nimport { SafePipe } from './safe.pipe';\n\nconst pipes = [SafePipe, PhonePipe, FileSizePipe, AmPmPipe, CamelToTitlePipe];\n@NgModule({\n  declarations: [pipes],\n  imports: [CommonModule],\n  exports: [pipes],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxPipesModule {}\n","import { Injectable } from '@angular/core';\nimport { interval, Observable, of, Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScrollButtonService {\n  subscription: Subscription;\n  source = interval(5000);\n\n  constructor() {}\n\n  setContainerId(id?): void {\n    if (id) {\n      const bodyEl = document.getElementById(id);\n      bodyEl.setAttribute('id', id);\n    } else {\n      const bodyEl = document.getElementsByTagName('BODY')[0];\n      bodyEl.setAttribute('id', 'ix-scroll-container');\n    }\n  }\n\n  checkScroll(id?): Observable<boolean> {\n    if (id) {\n      const container = document.getElementById(id);\n      return of(container.scrollHeight > container.clientHeight);\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      return of(container.scrollHeight > container.clientHeight);\n    }\n  }\n\n  scrollToTop(id?): void {\n    if (id) {\n      const container = document.getElementById(id);\n      container.scroll({ top: 0, behavior: 'smooth' });\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      container.scroll({ top: 0, behavior: 'smooth' });\n    }\n  }\n\n  scrollElementIntoView(id, location: 'start' | 'end'): void {\n    const element = document.getElementById(id);\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: location || 'start',\n      inline: 'nearest',\n    });\n  }\n\n  public startScrollMarking(): void {\n    this.subscription = this.source.subscribe((val) => {\n      this._markScrollables();\n    });\n  }\n  public stopScrollMarking(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private _markScrollables(): void {\n    const slice = Array.prototype.slice;\n\n    slice\n      .call(document.querySelectorAll('*'))\n      .filter(\n        (e) => e.scrollWidth > e.offsetWidth || e.scrollHeight > e.offsetHeight\n      )\n      .filter((e) => {\n        const style = window.getComputedStyle(e);\n        return [style.overflow, style.overflowX, style.overflowY].some(\n          (e) => e === 'auto' || e === 'scroll'\n        );\n      })\n      .forEach((e) => {\n        const color = Math.floor(Math.random() * 16777215).toString(16);\n        e.style.backgroundColor = '#' + color;\n        this._throttle('scroll', 'optimizedScroll', e);\n        e.addEventListener('scroll', (event) => {\n          console.log(\n            '%c[scroll]',\n            'color: white; background-color:#' + color,\n            event.target\n          );\n        });\n      });\n  }\n  private _throttle(type, name, obj) {\n    obj = obj || window;\n    let running = false;\n    const func = () => {\n      if (running) {\n        return;\n      }\n      running = true;\n      requestAnimationFrame(() => {\n        obj.dispatchEvent(new CustomEvent(name));\n        running = false;\n      });\n    };\n    obj.addEventListener(type, func);\n  }\n}\n","import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  Input,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport { ScrollButtonService } from './ix-scroll.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ix-scroll-button',\n  templateUrl: './ix-scroll.component.html',\n  styleUrls: ['./ix-scroll.component.scss'],\n})\nexport class ScrollTopButtonComponent implements OnInit {\n  @Input() color: 'primary' | 'accent';\n  @Input() scrollableElementId: string;\n  @Input() isScrollable = false;\n  constructor(\n    private ngZone: NgZone,\n    public scrollButtonService: ScrollButtonService\n  ) {\n    window.onresize = (e) => {\n      this.ngZone.run(() => {\n        this.localCheckScroll();\n      });\n    };\n  }\n\n  localCheckScroll(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService\n        .checkScroll(this.scrollableElementId)\n        .subscribe((res) => {\n          this.isScrollable = res;\n        });\n    } else {\n      this.scrollButtonService.checkScroll().subscribe((res) => {\n        this.isScrollable = res;\n      });\n    }\n  }\n  scrollToTop(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService.scrollToTop(this.scrollableElementId);\n    } else {\n      this.scrollButtonService.scrollToTop();\n    }\n  }\n\n  ngOnInit(): void {\n    this.scrollButtonService.setContainerId(this.scrollableElementId);\n    setTimeout(() => {\n      this.localCheckScroll();\n    }, 500);\n  }\n}\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { ScrollTopButtonComponent } from './ix-scroll.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ScrollTopButtonComponent],\n  imports: [MatButtonModule, MatIconModule, CommonModule],\n  exports: [ScrollTopButtonComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxScrollModule {}\n","import { Injectable } from '@angular/core';\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxMediaQueryService {\n  public mq: string;\n  public mediaQuery: string;\n  public suffix: string;\n  private medias: MediaChange[];\n\n  constructor(public media: MediaObserver) {\n    this.media\n      .asObservable()\n      .pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this.medias = changes;\n          return changes[0];\n        })\n      )\n      .subscribe((change: MediaChange) => {\n        this.mq = change.mqAlias;\n        this.mediaQuery = change.mediaQuery;\n        this.suffix = change.suffix;\n      });\n  }\n\n  private _mediaChecker(mediaArray: MediaChange[], mqString: string): boolean {\n    let exists;\n    mediaArray.forEach((med) => {\n      if (med.mqAlias === mqString) {\n        exists = true;\n      }\n    });\n    return exists;\n  }\n\n  // used to check if viewport has a media query size\n  public has(mqString): boolean {\n    if (this.medias) {\n      return this._mediaChecker(this.medias, mqString);\n    } else {\n      this.media.asObservable().pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this._mediaChecker(changes, mqString);\n        })\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * This is a shim for the Window.localStorage api.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n *\n * This service performs feature detection of Window.localStorage. If\n * Window.localStorage is available then the functions are passed through.\n * If Window.localStorage is not available then items are stored on\n * an object on Window named Window.{storageKey}. And all methods act on that\n * object. The {storageKey} variable is stored in environments.storageKey.\n *\n * This service only supports Window.localStorage as Window.localStorage\n * is controlled by the browser and cannot be truely shimed beyond the sesssion.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxLocalStorageService {\n  public readonly localStorageFeatureAvailable: boolean;\n\n  constructor() {\n    this.localStorageFeatureAvailable = this.storageAvailable('localStorage');\n    if (!this.localStorageFeatureAvailable) {\n      console.warn(\n        'Window.localStorage is NOT available. Falling back to object storage.'\n      );\n      window[`ix`] = {};\n    }\n  }\n\n  /**\n   * Save data to localStorage\n   * @param key the key of the stored item\n   * @param value the value being stored\n   */\n  public setItem(key: string, value: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.setItem(key, value);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = value;\n    }\n  }\n\n  /**\n   * Get saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public getItem(key: string): string {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      return window.localStorage.getItem(key);\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      return window[`ix`][key];\n    }\n  }\n\n  /**\n   * Remove saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public removeItem(key: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.removeItem(key);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = null;\n    }\n  }\n\n  /**\n   * Remove all saved data from localStorage\n   */\n  public clear(): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.clear();\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`] = {};\n    }\n  }\n\n  protected iCanUseLocalStorageApi(): boolean {\n    return this.storageAvailable('localStorage');\n  }\n\n  protected storageAvailable(type: string): boolean {\n    var storage;\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import { Injectable, Inject, OnInit } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\n\nimport { IxLocalStorageService } from '../shared/local-storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxDarkService {\n  prefersDark: boolean;\n  localStorageLightDark: string;\n  currentMode: string;\n  themeStream = new ReplaySubject<string>();\n  sorageService: IxLocalStorageService;\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    sorageService: IxLocalStorageService\n  ) {\n    this.prefersDark =\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.sorageService = sorageService;\n    this.localStorageLightDark = sorageService.getItem('DarkModePref');\n  }\n  // ******************************************************************************\n  // This service requires Angular Material's theming to have two themes\n  // with .light and .dark wrapping classes.\n  // It is possible to use this service outside of Angular Material, but\n  // native framework element coloring will not be affected without\n  // custom css overwrites.\n  // ******************************************************************************\n\n  // used onInit() to evaluate users system preferences\n  // if they have a preset preferences in localstorage or window.storage\n  // it will apply that theme, if not it will check system settings\n  // if they have dark mode enabled, it will apply the dark mode to the app\n  public setDarkModePreference(): void {\n    if (this.localStorageLightDark) {\n      this.document.body.classList.add(this.localStorageLightDark);\n      this._toggleBodyClasses(this.localStorageLightDark);\n      if (this.localStorageLightDark === 'dark') {\n        this._toggleBodyClasses('dark');\n        this.themeStream.next('dark');\n      } else {\n        this._toggleBodyClasses('light');\n        this.themeStream.next('light');\n      }\n    } else if (this.prefersDark) {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  // used to toggle light/dark themes\n  public toggleDarkLightMode(): void {\n    if (this.localStorageLightDark === 'light') {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  private _toggleBodyClasses(colorToSet): void {\n    this.sorageService.setItem('DarkModePref', colorToSet);\n    this.localStorageLightDark = this.sorageService.getItem('DarkModePref');\n    if (colorToSet.toLowerCase() === 'dark') {\n      this.document.body.classList.remove('light');\n      this.document.body.classList.add(colorToSet);\n    } else if (colorToSet.toLowerCase() === 'light') {\n      this.document.body.classList.remove('dark');\n      this.document.body.classList.add(colorToSet);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * This is a shim for the Window.sessionStorage api.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n *\n * This service performs feature detection of Window.sessionStorage. If\n * Window.sessionStorage is available then the functions are passed through.\n * If Window.sessionStorage is not available then items are stored on\n * an object on Window named Window.{storageKey}. And all methods act on that\n * object. The {storageKey} variable is stored in environments.storageKey.\n *\n * This service only supports Window.sessionStorage as Window.sessionStorage\n * is controlled by the browser and cannot be truely shimed beyond the sesssion.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxSessionStorageService {\n  public readonly sessionStorageFeatureAvailable: boolean;\n\n  constructor() {\n    this.sessionStorageFeatureAvailable = this.storageAvailable(\n      'sessionStorage'\n    );\n    if (!this.sessionStorageFeatureAvailable) {\n      console.warn(\n        'Window.sessionStorage is NOT available. Falling back to object storage.'\n      );\n      window[`ix`] = {};\n    }\n  }\n\n  /**\n   * Save data to sessionStorage\n   * @param key the key of the stored item\n   * @param value the value being stored\n   */\n  public setItem(key: string, value: string): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.setItem(key, value);\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`][key] = value;\n    }\n  }\n\n  /**\n   * Get saved data from sessionStorage\n   * @param key the key of the stored item\n   */\n  public getItem(key: string): string {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      return window.sessionStorage.getItem(key);\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      return window[`ix`][key];\n    }\n  }\n\n  /**\n   * Remove saved data from sessionStorage\n   * @param key the key of the stored item\n   */\n  public removeItem(key: string): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.removeItem(key);\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`][key] = null;\n    }\n  }\n\n  /**\n   * Remove all saved data from sessionStorage\n   */\n  public clear(): void {\n    // pass through\n    if (this.sessionStorageFeatureAvailable) {\n      window.sessionStorage.clear();\n      return;\n    }\n\n    // fallback\n    if (!this.sessionStorageFeatureAvailable) {\n      window[`ix`] = {};\n    }\n  }\n\n  protected iCanUseSessionStorageApi(): boolean {\n    return this.storageAvailable('sessionStorage');\n  }\n\n  protected storageAvailable(type: string): boolean {\n    var storage;\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  Input,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport { IxDarkService } from '../ix-dark/ix-dark.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ix-theme-button',\n  templateUrl: './ix-theme-button.component.html',\n  styleUrls: ['./ix-theme-button.component.scss'],\n})\nexport class ThemeButtonComponent implements OnInit {\n  theme: string;\n  constructor(private ngZone: NgZone, private darkService: IxDarkService) {}\n\n  // will switch themes using the IxDark service\n  public toggleDarkMode(): void {\n    this.darkService.toggleDarkLightMode();\n  }\n\n  // will subscribe to themes to animate icon\n  private _subToTheme(): void {\n    this.darkService.themeStream.subscribe((ev) => {\n      this.theme = ev;\n    });\n  }\n\n  // will setup themes with IxDark service\n  ngOnInit(): void {\n    this._subToTheme();\n    this.darkService.setDarkModePreference();\n  }\n}\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { ThemeButtonComponent } from './ix-theme-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ThemeButtonComponent],\n  imports: [MatButtonModule, MatIconModule, CommonModule],\n  exports: [ThemeButtonComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxThemeButtonModule {}\n"]}