{"version":3,"sources":["../../../projects/ix-libs/src/lib/ix-icons/ix-icons.module.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.service.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.component.ts","../../../projects/ix-libs/src/lib/ix-scroll/ix-scroll.module.ts","../../../projects/ix-libs/src/lib/ix-media/ix-media.service.ts","../../../projects/ix-libs/src/lib/shared/storage.service.ts","../../../projects/ix-libs/src/lib/ix-dark/ix-dark.service.ts"],"names":["iconRegistry","sanitizer","addSvgIcon","bypassSecurityTrustResourceUrl","NgModule","args","declarations","exports","MatIconRegistry","DomSanitizer","ScrollButtonService","prototype","setContainerId","id","document","getElementById","setAttribute","getElementsByTagName","checkScroll","container","of","scrollHeight","clientHeight","scrollToTop","scroll","top","behavior","Injectable","providedIn","ScrollTopButtonComponent","ngZone","scrollButtonService","_this","this","isScrollable","window","onresize","e","run","localCheckScroll","scrollableElementId","subscribe","res","ngOnInit","setTimeout","Component","selector","template","NgZone","Input","imports","MatButtonModule","MatIconModule","CommonModule","schemas","CUSTOM_ELEMENTS_SCHEMA","IxMediaQueryService","media","asObservable","pipe","filter","changes","length","map","medias","change","mq","mqAlias","mediaQuery","suffix","_mediaChecker","mediaArray","mqString","exists","forEach","med","has","MediaObserver","LocalStorageService","localStorageFeatureAvailable","storageAvailable","console","warn","setItem","key","value","localStorage","getItem","removeItem","clear","iCanUseLocalStorageApi","type","storage","x","IxDarkService","sorageService","themeStream","ReplaySubject","prefersDark","matchMedia","matches","localStorageLightDark","setDarkModePreference","body","classList","add","_toggleBodyClasses","next","toggleDarkLightMode","colorToSet","toLowerCase","remove","Inject","DOCUMENT"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [],\n  exports: [],\n})\nexport class IxIconsModule {\n  constructor(iconRegistry: MatIconRegistry, sanitizer: DomSanitizer) {\n    iconRegistry.addSvgIcon(\n      'ix-file-pdf',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_pdf.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-doc',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_doc.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-excel',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_excel.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-file-html',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/file_html.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-export',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/export.svg')\n    );\n    iconRegistry.addSvgIcon(\n      'ix-dialog',\n      sanitizer.bypassSecurityTrustResourceUrl('ix-img/dialog.svg')\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScrollButtonService {\n  constructor() {}\n\n  setContainerId(id?): void {\n    if (id) {\n      const bodyEl = document.getElementById(id);\n      bodyEl.setAttribute('id', id);\n    } else {\n      const bodyEl = document.getElementsByTagName('BODY')[0];\n      bodyEl.setAttribute('id', 'ix-scroll-container');\n    }\n  }\n\n  checkScroll(id?): Observable<boolean> {\n    if (id) {\n      const container = document.getElementById(id);\n      return of(container.scrollHeight > container.clientHeight);\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      return of(container.scrollHeight > container.clientHeight);\n    }\n  }\n\n  scrollToTop(id?): void {\n    if (id) {\n      const container = document.getElementById(id);\n      container.scroll({ top: 0, behavior: 'smooth' });\n    } else {\n      const container = document.getElementById('ix-scroll-container');\n      container.scroll({ top: 0, behavior: 'smooth' });\n    }\n  }\n}\n","import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  Input,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport { ScrollButtonService } from './ix-scroll.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'ix-scroll-button',\n  templateUrl: './ix-scroll.component.html',\n  styleUrls: ['./ix-scroll.component.scss'],\n})\nexport class ScrollTopButtonComponent implements OnInit {\n  @Input() color: 'primary' | 'accent';\n  @Input() scrollableElementId: string;\n  @Input() isScrollable = false;\n  constructor(\n    private ngZone: NgZone,\n    public scrollButtonService: ScrollButtonService\n  ) {\n    window.onresize = (e) => {\n      this.ngZone.run(() => {\n        this.localCheckScroll();\n      });\n    };\n  }\n\n  localCheckScroll(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService\n        .checkScroll(this.scrollableElementId)\n        .subscribe((res) => {\n          this.isScrollable = res;\n        });\n    } else {\n      this.scrollButtonService.checkScroll().subscribe((res) => {\n        this.isScrollable = res;\n      });\n    }\n  }\n  scrollToTop(): void {\n    if (this.scrollableElementId) {\n      this.scrollButtonService.scrollToTop(this.scrollableElementId);\n    } else {\n      this.scrollButtonService.scrollToTop();\n    }\n  }\n\n  ngOnInit(): void {\n    this.scrollButtonService.setContainerId(this.scrollableElementId);\n    setTimeout(() => {\n      this.localCheckScroll();\n    }, 500);\n  }\n}\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { ScrollTopButtonComponent } from './ix-scroll.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ScrollTopButtonComponent],\n  imports: [MatButtonModule, MatIconModule, CommonModule],\n  exports: [ScrollTopButtonComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class IxScrollModule {}\n","import { Injectable } from '@angular/core';\nimport { MediaObserver, MediaChange } from '@angular/flex-layout';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxMediaQueryService {\n  public mq: string;\n  public mediaQuery: string;\n  public suffix: string;\n  private medias: MediaChange[];\n\n  constructor(public media: MediaObserver) {\n    this.media\n      .asObservable()\n      .pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this.medias = changes;\n          return changes[0];\n        })\n      )\n      .subscribe((change: MediaChange) => {\n        this.mq = change.mqAlias;\n        this.mediaQuery = change.mediaQuery;\n        this.suffix = change.suffix;\n      });\n  }\n\n  private _mediaChecker(mediaArray: MediaChange[], mqString: string) {\n    let exists;\n    mediaArray.forEach((med) => {\n      if (med.mqAlias === mqString) {\n        exists = true;\n      }\n    });\n    return exists;\n  }\n\n  public has(mqString) {\n    if (this.medias) {\n      return this._mediaChecker(this.medias, mqString);\n    } else {\n      this.media.asObservable().pipe(\n        filter((changes: MediaChange[]) => changes.length > 0),\n        map((changes: MediaChange[]) => {\n          this._mediaChecker(changes, mqString);\n        })\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * This is a shim for the Window.localStorage api.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n *\n * This service performs feature detection of Window.localStorage. If\n * Window.localStorage is available then the functions are passed through.\n * If Window.localStorage is not available then items are stored on\n * an object on Window named Window.{storageKey}. And all methods act on that\n * object. The {storageKey} variable is stored in environments.storageKey.\n *\n * This service only supports Window.localStorage as Window.localStorage\n * is controlled by the browser and cannot be truely shimed beyond the sesssion.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService {\n  public readonly localStorageFeatureAvailable: boolean;\n\n  constructor() {\n    this.localStorageFeatureAvailable = this.storageAvailable('localStorage');\n    if (!this.localStorageFeatureAvailable) {\n      console.warn(\n        'Window.localStorage is NOT available. Falling back to object storage.'\n      );\n      window[`ix`] = {};\n    }\n  }\n\n  /**\n   * Save data to localStorage\n   * @param key the key of the stored item\n   * @param value the value being stored\n   */\n  public setItem(key: string, value: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.setItem(key, value);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = value;\n    }\n  }\n\n  /**\n   * Get saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public getItem(key: string): string {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      return window.localStorage.getItem(key);\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      return window[`ix`][key];\n    }\n  }\n\n  /**\n   * Remove saved data from localStorage\n   * @param key the key of the stored item\n   */\n  public removeItem(key: string): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.removeItem(key);\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`][key] = null;\n    }\n  }\n\n  /**\n   * Remove all saved data from localStorage\n   */\n  public clear(): void {\n    // pass through\n    if (this.localStorageFeatureAvailable) {\n      window.localStorage.clear();\n      return;\n    }\n\n    // fallback\n    if (!this.localStorageFeatureAvailable) {\n      window[`ix`] = {};\n    }\n  }\n\n  protected iCanUseLocalStorageApi(): boolean {\n    return this.storageAvailable('localStorage');\n  }\n\n  protected storageAvailable(type: string): boolean {\n    var storage;\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import { Injectable, Inject, OnInit } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\n\nimport { LocalStorageService } from '../shared/storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IxDarkService {\n  prefersDark: boolean;\n  localStorageLightDark: string;\n  currentMode: string;\n  themeStream = new ReplaySubject<string>();\n  sorageService: LocalStorageService;\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    sorageService: LocalStorageService\n  ) {\n    this.prefersDark =\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    this.sorageService = sorageService;\n    this.localStorageLightDark = sorageService.getItem('DarkModePref');\n  }\n  // ******************************************************************************\n  // This service requires Angular Material's theming to have two themes\n  // with .light and .dark wrapping classes.\n  // It is possible to use this service outside of Angular Material, but\n  // native framework element coloring will not be affected without\n  // custom css overwrites.\n  // ******************************************************************************\n\n  // used onInit()\n  public setDarkModePreference() {\n    if (this.localStorageLightDark) {\n      this.document.body.classList.add(this.localStorageLightDark);\n      this._toggleBodyClasses(this.localStorageLightDark);\n      if (this.localStorageLightDark === 'dark') {\n        this._toggleBodyClasses('dark');\n        this.themeStream.next('dark');\n      } else {\n        this._toggleBodyClasses('light');\n        this.themeStream.next('light');\n      }\n    } else if (this.prefersDark) {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  // used to toggle light/dark themes\n  public toggleDarkLightMode() {\n    if (this.localStorageLightDark === 'light') {\n      this._toggleBodyClasses('dark');\n      this.themeStream.next('dark');\n    } else {\n      this._toggleBodyClasses('light');\n      this.themeStream.next('light');\n    }\n  }\n\n  private _toggleBodyClasses(colorToSet) {\n    this.sorageService.setItem('DarkModePref', colorToSet);\n    this.localStorageLightDark = this.sorageService.getItem('DarkModePref');\n    if (colorToSet.toLowerCase() === 'dark') {\n      this.document.body.classList.remove('light');\n      this.document.body.classList.add(colorToSet);\n    } else if (colorToSet.toLowerCase() === 'light') {\n      this.document.body.classList.remove('dark');\n      this.document.body.classList.add(colorToSet);\n    }\n  }\n}\n"]}