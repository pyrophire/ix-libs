import { Injectable } from '@angular/core';
import { interval, of } from 'rxjs';
import * as i0 from "@angular/core";
export class ScrollButtonService {
    constructor() {
        this.source = interval(5000);
    }
    setContainerId(id) {
        if (id) {
            const bodyEl = document.getElementById(id);
            bodyEl.setAttribute('id', id);
        }
        else {
            const bodyEl = document.getElementsByTagName('BODY')[0];
            bodyEl.setAttribute('id', 'ix-scroll-container');
        }
    }
    checkScroll(id) {
        if (id) {
            const container = document.getElementById(id);
            return of(container.scrollHeight > container.clientHeight);
        }
        else {
            const container = document.getElementById('ix-scroll-container');
            return of(container.scrollHeight > container.clientHeight);
        }
    }
    scrollToTop(id) {
        if (id) {
            const container = document.getElementById(id);
            container.scroll({ top: 0, behavior: 'smooth' });
        }
        else {
            const container = document.getElementById('ix-scroll-container');
            container.scroll({ top: 0, behavior: 'smooth' });
        }
    }
    scrollElementIntoView(id, location) {
        const element = document.getElementById(id);
        element.scrollIntoView({
            behavior: 'smooth',
            block: location || 'start',
            inline: 'nearest',
        });
    }
    startScrollMarking() {
        this.subscription = this.source.subscribe((val) => {
            this._markScrollables();
        });
    }
    stopScrollMarking() {
        this.subscription.unsubscribe();
    }
    _markScrollables() {
        const slice = Array.prototype.slice;
        slice
            .call(document.querySelectorAll('*'))
            .filter((e) => e.scrollWidth > e.offsetWidth || e.scrollHeight > e.offsetHeight)
            .filter((e) => {
            const style = window.getComputedStyle(e);
            return [style.overflow, style.overflowX, style.overflowY].some((e) => e === 'auto' || e === 'scroll');
        })
            .forEach((e) => {
            const color = Math.floor(Math.random() * 16777215).toString(16);
            e.style.backgroundColor = '#' + color;
            this._throttle('scroll', 'optimizedScroll', e);
            e.addEventListener('scroll', (event) => {
                console.log('%c[scroll]', 'color: white; background-color:#' + color, event.target);
            });
        });
    }
    _throttle(type, name, obj) {
        obj = obj || window;
        let running = false;
        const func = () => {
            if (running) {
                return;
            }
            running = true;
            requestAnimationFrame(() => {
                obj.dispatchEvent(new CustomEvent(name));
                running = false;
            });
        };
        obj.addEventListener(type, func);
    }
}
ScrollButtonService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollButtonService_Factory() { return new ScrollButtonService(); }, token: ScrollButtonService, providedIn: "root" });
ScrollButtonService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ScrollButtonService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,